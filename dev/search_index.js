var documenterSearchIndex = {"docs":
[{"location":"streaming/#Streaming-API","page":"Streaming","title":"Streaming API","text":"","category":"section"},{"location":"forex/#Forex-API","page":"Forex","title":"Forex API","text":"","category":"section"},{"location":"forex/","page":"Forex","title":"Forex","text":"The following endpoints are covered by the Forex API via these functions:","category":"page"},{"location":"forex/","page":"Forex","title":"Forex","text":"historic_forex_ticks                => Historic Forex Ticks\nreal_time_currency_conversion       => Real-time Currency Conversion\nlast_quote_currency_pair            => Last Quote for a Currency Pair\nforex_grouped_daily_bars            => Aggregates (Bars)\nforex_previous_close                => Grouped Daily (Bars)\nforex_aggregates_bars               => Previous Close\nforex_snapshot_ticker               => Snapshot - All Tickers\nforex_snapshot_all_tickers          => Snapshot - Gainers/Losers\nforex_snapshot_gainers_losers       => Snapshot - Ticker","category":"page"},{"location":"forex/","page":"Forex","title":"Forex","text":"Detailed information on each function can be extracted in Julia. For example;","category":"page"},{"location":"forex/","page":"Forex","title":"Forex","text":"using PolygonIO\njulia>?historic_forex_ticks","category":"page"},{"location":"reference/#Reference-API","page":"Reference","title":"Reference API","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"The following endpoints are covered by the Reference API via these functions:","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"tickers                         => Tickers\nticker_types                    => Ticker Types\nticker_details                  => Ticker Details\nticker_details_vX               => Ticker Details vX\nticker_news                     => Ticker News\nmarkets                         => Markets\nlocales                         => Locales\nstock_splits                    => Stock Splits\nstock_dividends                 => Stock Dividends\nstock_financials                => Stock Financials\nmarket_holidays                 => Market Holidays\nmarket_status                   => Market Status\nstock_exchanges                 => Stock Exchanges\ncondition_mappings              => Condition Mappings\ncrypto_exchanges                => Crypto Exchanges","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Detailed information on each function can be extracted in Julia. For example;","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"using PolygonIO\njulia>?tickers","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PolygonIO","category":"page"},{"location":"#PolygonIO","page":"Home","title":"PolygonIO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PolygonIO.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PolygonIO.jl is a client accessing the WebSocket and RESTful APIs of Polygon.io in native Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install PolygonIO either do","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"PolygonIO\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or switch to Pkg mode with ] and issue","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add PolygonIO","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PolygonIO\nopts = PolyOpts(API_KEY, Table.jl Supported Tabular Interface As Sink or nothing)\ndata = API_FUNC(opts, [args...]; [kwargs...])","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PolygonIO\nusing DataFrames\n\nopts = PolyOpts(API_KEY, DataFrame)\nticker_search_info = tickers(opts, \"bitcoin\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ticker_search_info = tickers(opts, \"bitcoin\")\n10×10 DataFrame\n Row │ ticker       name                               market  locale  active  currency_symbol  currency_name         base_curre ⋯\n     │ String       String                             String  String  Bool    String           String                String     ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ X:BSVUSD     Bitcoin SV - United States Dollar  crypto  global    true  USD              United States Dollar  BSV        ⋯\n   2 │ X:BTCJPY     Bitcoin - Japanese Yen             crypto  global    true  JPY              Japanese Yen          BTC\n   3 │ X:BCHGBP     Bitcoin Cash - Great Britian Pou…  crypto  global    true  GBP              Great Britian Pound   BCH\n   4 │ X:BTCGBP     Bitcoin Cash - Great Britain Pou…  crypto  global    true  GBP              Great Britain Pound   BTC\n   5 │ X:BCHCZK     Bitcoin Cash - Czech Koruna        crypto  global    true  CZK              Czech Koruna          BCH        ⋯\n   6 │ X:ETHBTC     Ethereum - Bitcoin                 crypto  global    true  BTC              Bitcoin               ETH\n   7 │ X:BTCEUR     Bitcoin - Euro                     crypto  global    true  EUR              Euro                  BTC\n   8 │ X:BCHABCUSD  Bitcoin Cash ABC - United States…  crypto  global    true  USD              United States Dollar  BCHABC\n   9 │ X:ATMUSD     Bitcoin ATM - United States Doll…  crypto  global    true  USD              United States Dollar  ATM        ⋯\n  10 │ X:BCHUSD     Bitcoin Cash - United States Dol…  crypto  global    true  USD              United States Dollar  BCH\n                                                                                                                 3 columns omitted","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[X] Full coverage of Stock API\n[X] Full coverage of Forex API\n[X] Full coverage of Crypto API\n[X] Full coverage of Reference Data API\n[ ] Full coverage of WebSocket API","category":"page"},{"location":"#User-API-Functions-and-Associated-Upstream-Endpoints","page":"Home","title":"User API Functions & Associated Upstream Endpoints","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"crypto.md\",\n    \"forex.md\",\n    \"reference.md\",\n    \"stocks.md\",\n    \"streaming.md\"\n]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PolygonIO]","category":"page"},{"location":"#PolygonIO.AbstractPolyChoice","page":"Home","title":"PolygonIO.AbstractPolyChoice","text":"AbstractPolyChoice\n\nAbstract base type for dispatching extracted JSONs.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.AbstractPolyOptions","page":"Home","title":"PolygonIO.AbstractPolyOptions","text":"AbstractPolyOptions\n\nAbstract base type for all generic options.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkNoResults","page":"Home","title":"PolygonIO.NoSinkNoResults","text":"Internal function to dispatch on no sink no results scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesData","page":"Home","title":"PolygonIO.NoSinkYesData","text":"Internal function to dispatch on no sink yes data scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesLast","page":"Home","title":"PolygonIO.NoSinkYesLast","text":"Internal function to dispatch on no sink yes last scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesResults","page":"Home","title":"PolygonIO.NoSinkYesResults","text":"Internal function to dispatch on no sink yes results scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesTicker","page":"Home","title":"PolygonIO.NoSinkYesTicker","text":"Internal function to dispatch on no sink yes ticker scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesTickers","page":"Home","title":"PolygonIO.NoSinkYesTickers","text":"Internal function to dispatch on no sink yes tickers scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.NoSinkYesTicks","page":"Home","title":"PolygonIO.NoSinkYesTicks","text":"Internal function to dispatch on no sink yes ticks scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.PolyOpts","page":"Home","title":"PolygonIO.PolyOpts","text":"PolyOpts <: AbstractPolyOptions\n\nUser options for the PolygonIO.\n\nOptions\n\napi_key: String representing the API key from a registered polygon.io account.\ntable: Whether to covnert extracted results as a table or not. Compatible Table.jl or nothing for raw JSONs.\n\nExamples\n\njulia> using PolygonIO, DataFrames\njulia> opts = PolyOpts(API_KEY, DataFrame)  # if user wants tabularised output\njulia> opts = PolyOpts(API_KEY, nothing)    # if user wants raw JSON output\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkNoResults","page":"Home","title":"PolygonIO.YesSinkNoResults","text":"Internal function to dispatch on yes sink no results scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesData","page":"Home","title":"PolygonIO.YesSinkYesData","text":"Internal function to dispatch on yes sink yes data scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesLast","page":"Home","title":"PolygonIO.YesSinkYesLast","text":"Internal function to dispatch on yes sink no last scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesResults","page":"Home","title":"PolygonIO.YesSinkYesResults","text":"Internal function to dispatch on yes sink yes results scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesTicker","page":"Home","title":"PolygonIO.YesSinkYesTicker","text":"Internal function to dispatch on yes sink yes ticker scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesTickers","page":"Home","title":"PolygonIO.YesSinkYesTickers","text":"Internal function to dispatch on yes sink yes tickers scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.YesSinkYesTicks","page":"Home","title":"PolygonIO.YesSinkYesTicks","text":"Internal function to dispatch on yes sink yes ticks scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkNoResults, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkNoResults, x, sink)\n\nInternal function to apply a choice for no sink and no results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesData, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesData, x, sink)\n\nInternal function to apply a choice for no sink and yes data scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesLast, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesLast, x, sink)\n\nInternal function to apply a choice for no sink and yes last scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesResults, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesResults, x, sink)\n\nInternal function to apply a choice for no sink and yes results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesTicker, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesTicker, x, sink)\n\nInternal function to apply a choice for no sink and yes tickers scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesTickers, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesTickers, x, sink)\n\nInternal function to apply a choice for no sink and yes tickers scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.NoSinkYesTicks, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::NoSinkYesTicks, x, sink)\n\nInternal function to apply a choice for no sink and yes ticks scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkNoResults, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkNoResults, x, sink)\n\nInternal function to apply a choice for yes sink and no results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkNoResults, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkNoResults, x, sink)\n\nInternal function to apply a choice for no sink and no results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesData, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesData, x, sink)\n\nInternal function to apply a choice for yes sink and yes data scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesData, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesData, x, sink::Nothing)\n\nInternal function to apply a choice for no sink and yes data scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesLast, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesLast, x, sink)\n\nInternal function to apply a choice for yes sink and yes last scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesLast, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesLast, x, sink::Nothing)\n\nInternal function to apply a choice for no sink and yes last scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesResults, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesResults, x, sink)\n\nInternal function to apply a choice for yes sink and yes results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesResults, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkNoResults, x, sink)\n\nInternal function to apply a choice for no sink and yes results scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTicker, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTicker, x, sink)\n\nInternal function to apply a choice for yes sink and yes ticker scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTicker, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTicker, x, sink::Nothing)\n\nInternal function to apply a choice for yes sink and yes ticker scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTickers, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTickers, x, sink)\n\nInternal function to apply a choice for yes sink and yes tickers scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTickers, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTickers, x, sink::Nothing)\n\nInternal function to apply a choice for no sink and yes tickers scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTicks, Any, Any}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTicks, x, sink)\n\nInternal function to apply a choice for yes sink and yes ticks scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.apply_choice-Tuple{PolygonIO.YesSinkYesTicks, Any, Nothing}","page":"Home","title":"PolygonIO.apply_choice","text":"apply_choice(::YesSinkYesTicks, x, sink::Nothing)\n\nInternal function to apply a choice for no sink and yes ticks scenarios.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.condition_mappings","page":"Home","title":"PolygonIO.condition_mappings","text":"condition_mappings(opts::PolyOpts, tickertype=\"trades\")\n\nGet a unified numerical mapping for conditions on trades and quotes. Each feed/exchange uses its own set of codes to identify conditions, so the same condition may have a different code depending on the originator of the data. Polygon.io defines its own mapping to allow for uniformly identifying a condition across feeds/exchanges.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\ntickertype::AbstractString - The type of ticks to return mappings for. Must be one of \"trades\" or \"quotes\".\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> condition_mappings(opts, \"trades\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1conditionmappingsanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_aggregates_bars","page":"Home","title":"PolygonIO.crypto_aggregates_bars","text":"crypto_aggregates_bars(opts::PolyOpts, cryptoTicker=\"X:BTCUSD\", multiplier=1, timespan=\"day\", from=\"2020-10-14\", to=\"2020-10-14\";\n                       adjusted=true, sort=\"asc\", limit=120, kwargs...)\n\nGet aggregate bars for a cryptocurrency pair over a given date range in custom time window sizes. For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ncryptoTicker: The ticker symbol of the currency pair.\nmultiplier: The size of the timespan multiplier.\ntimespan: The size of the timespan multiplier.\nfrom: The start of the aggregate time window.\nto: The end of the aggregate time window.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\nsort: Sort the results by timestamp. asc will return results in ascending order (oldest at the top),  desc will return results in descending order (newest at the top).\nlimit: Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 120.\nkwargs: Additional arguments to pass to the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_aggregates_bars(opts, \"X:BTCUSD\", 5, \"minute\", \"2020-10-14\", \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2aggs_tickercryptoTickerrangemultiplier___timespan___from___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_daily_open_close","page":"Home","title":"PolygonIO.crypto_daily_open_close","text":"crypto_daily_open_close(opts::PolyOpts, from=\"BTC\", to=\"USD\", date=\"2020-10-14\"; adjusted=true)\n\nGet the open, close prices of a cryptocurrency symbol on a certain day.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the pair.\nto: The \"to\" symbol of the pair.\ndate: The date of the requested open/close in the format YYYY-MM-DD.\nadjusted: Whether or not the results are adjusted for splits. By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_daily_open_close(opts, \"BTC\", \"USD\", \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1open-close_cryptofrom___to___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_exchanges-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.crypto_exchanges","text":"crypto_exchanges(opts::PolyOpts)\n\nGet a list of cryptocurrency exchanges which are supported by Polygon.io.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_exchanges(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1metacrypto-exchangesanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.crypto_grouped_daily_bars","page":"Home","title":"PolygonIO.crypto_grouped_daily_bars","text":"crypto_grouped_daily_bars(opts::PolyOpts, date=\"2020-10-14\"; adjusted=true)\n\nGet the daily open, high, low, and close (OHLC) for the entire cryptocurrency markets.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndate: The beginning date for the aggregate window.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_grouped_daily_bars(opts, \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2aggsgroupedlocaleglobalmarket_cryptodateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_previous_close","page":"Home","title":"PolygonIO.crypto_previous_close","text":"crypto_previous_close(opts::PolyOpts, cryptoTicker=\"X:BTCUSD\"; adjusted=true)\n\nGet the previous day's open, high, low, and close (OHLC) for the specified cryptocurrency pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ncryptoTicker: The ticker symbol of the currency pair.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_previous_close(opts, \"X:BTCUSD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2aggstickercryptoTickerprevanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_snapshot_all_tickers-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.crypto_snapshot_all_tickers","text":"crypto_snapshot_all_tickers(opts::PolyOpts; kwargs...)\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded cryptocurrency symbols. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nkwargs: Additional arguments to pass to the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_snapshot_all_tickers(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketscryptotickersanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.crypto_snapshot_gainers_losers","page":"Home","title":"PolygonIO.crypto_snapshot_gainers_losers","text":"crypto_snapshot_gainers_losers(opts::PolyOpts, direction=\"gainers\")\n\nGet the current top 20 gainers or losers of the day in cryptocurrency markets. Top gainers are those tickers whose price has increased by the highest percentage since the previous day's close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day's close. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndirection: The direction of the snapshot results to return. Options are \"gainers\" or \"losers\".\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_snapshot_gainers_losers(opts, \"losers\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketscryptodirectionanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_snapshot_ticker","page":"Home","title":"PolygonIO.crypto_snapshot_ticker","text":"crypto_snapshot_ticker(opts::PolyOpts, ticker=\"X:BTCUSD\")\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded cryptocurrency symbol. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nticker: Ticker of the snapshot.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_snapshot_ticker(opts, \"X:BTCUSD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketscrypto_tickerstickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.crypto_snapshot_ticker_full_book","page":"Home","title":"PolygonIO.crypto_snapshot_ticker_full_book","text":"crypto_snapshot_ticker_full_book(opts::PolyOpts, ticker=\"X:BTCUSD\")\n\nGet the current level 2 book of a single ticker. This is the combined book from all of the exchanges. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nticker: The cryptocurrency ticker.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> crypto_snapshot_ticker_full_book(opts, \"X:BTCUSD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketscryptotickerstickerbookanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.forex_aggregates_bars","page":"Home","title":"PolygonIO.forex_aggregates_bars","text":"forex_aggregates_bars(opts::PolyOpts, forexTicker=\"C:EURUSD\", multiplier=1, timespan=\"day\", from=\"2020-10-14\", to=\"2020-10-14\";\n                    adjusted=true, sort=\"asc\", limit=120)\n\nGet aggregate bars for a forex pair over a given date range in custom time window sizes. For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nforexTicker: The ticker symbol of the currency pair.\nmultiplier: The size of the timespan multiplier.\ntimespan: The size of the time window.\nfrom: The start of the aggregate time window.\nto: The end of the aggregate time window.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\nsort: Sort the results by timestamp. asc will return results in ascending order (oldest at the top),  desc will return results in descending order (newest at the top).\nlimit: Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 120.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_aggregates_bars(opts, \"C:EURUSD\", \"5\", \"minute\", \"2020-10-14\", \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggs_tickerforexTickerrangemultiplier___timespan___from___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.forex_grouped_daily_bars","page":"Home","title":"PolygonIO.forex_grouped_daily_bars","text":"forex_grouped_daily_bars(opts::PolyOpts, date=\"2020-10-14\"; adjusted=true)\n\nGet the daily open, high, low, and close (OHLC) for the entire forex markets.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndate: The beginning date for the aggregate window.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_grouped_daily_bars(opts, \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggsgroupedlocaleglobalmarket_fxdateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.forex_previous_close","page":"Home","title":"PolygonIO.forex_previous_close","text":"forex_previous_close(opts::PolyOpts, forexTicker=\"C:EURUSD\"; adjusted=true)\n\nGet the previous day's open, high, low, and close (OHLC) for the specified forex pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nforexTicker: The ticker symbol of the currency pair.\nadjusted: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_previous_close(opts, \"C:EURUSD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggstickerforexTickerprevanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.forex_snapshot_all_tickers-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.forex_snapshot_all_tickers","text":"forex_snapshot_all_tickers(opts::PolyOpts; kwargs...)\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded forex symbols. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nkwargs: The keyword arguments to pass to the PolyOpts.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_snapshot_all_tickers(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketsforextickersanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.forex_snapshot_gainers_losers","page":"Home","title":"PolygonIO.forex_snapshot_gainers_losers","text":"forex_snapshot_gainers_losers(opts::PolyOpts, direction=\"gainers\")\n\nGet the current top 20 gainers or losers of the day in forex markets. Top gainers are those tickers whose price has increased by the highest percentage since the previous day's close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day's close. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndirection: The direction of the snapshot results to return. \"gainers\" or \"losers\".\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_snapshot_gainers_losers(opts, \"losers\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketsforexdirectionanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.forex_snapshot_ticker","page":"Home","title":"PolygonIO.forex_snapshot_ticker","text":"forex_snapshot_ticker(opts::PolyOpts, forexTicker=\"C:EURUSD\")\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded currency symbol. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nforexTicker: The forex ticker.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> forex_snapshot_ticker(opts, \"C:EURUSD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleglobalmarketsforex_tickerstickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.generate_output_from_url-Tuple{PolygonIO.AbstractPolyChoice, Any, Any, Any}","page":"Home","title":"PolygonIO.generate_output_from_url","text":"generate_output_from_url(choice::AbstractPolyChoice, url, params, sink)\n\nInternal function to dynamically generate output from a user specified AbstractPolyChoice.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.historic_crypto_trades","page":"Home","title":"PolygonIO.historic_crypto_trades","text":"historic_crypto_trades(opts::PolyOpts, from=\"BTC\", to=\"USD\", date=\"2020-10-14\"; limit=100, kwargs...)\n\nGet historic trade ticks for a cryptocurrency pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the crypto pair.\nto: The \"to\" symbol of the crypto pair.\ndate: The date/day of the historic ticks to retrieve.\nlimit: Limit the size of the response, max 10000. Defaults to 100.\nkwargs: Additional arguments to pass to the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> historic_crypto_trades(opts, \"BTC\", \"USD\", \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1historic_cryptofrom___to___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.historic_forex_ticks","page":"Home","title":"PolygonIO.historic_forex_ticks","text":"historic_forex_ticks(opts::PolyOpts, from=\"AUD\", to=\"USD\", date=\"2020-10-14\"; limit=100, kwargs...)\n\nGet historic ticks for a forex currency pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the currency pair. Example: For USD/JPY the from would be USD.\nto: The \"to\" symbol of the currency pair. Example: For USD/JPY the to would be JPY.\ndate: The date/day of the historic ticks to retrieve.\nlimit: TLimit the size of the response, max 10000. Defualt 100.\nkwargs: Additional parameters to pass to the Poly API.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> historic_forex_ticks(opts, \"AUD\", \"AUD\", \"2020-10-14\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv1historic_forexfrom___to___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.last_quote_currency_pair","page":"Home","title":"PolygonIO.last_quote_currency_pair","text":"last_quote_currency_pair(opts::PolyOpts, from=\"AUD\", to=\"USD\")\n\nGet the last quote tick for a forex currency pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the pair.\nto: The \"to\" symbol of the pair.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> last_quote_currency_pair(opts, \"AUD\", \"USD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv1lastquotecurrenciesfrom___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.last_trade_crypto_pair","page":"Home","title":"PolygonIO.last_trade_crypto_pair","text":"last_trade_crypto_pair(opts::PolyOpts, from=\"BTC\", to=\"USD\")\n\nGet the last trade tick for a cryptocurrency pair.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the pair.\nto: The \"to\" symbol of the pair.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> last_trade_crypto_pair(opts, \"BTC\", \"USD\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1last_cryptofrom___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.locales-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.locales","text":"locales(opts::PolyOpts)\n\nGet a list of locales currently supported by Polygon.io.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> locales(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencelocalesanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.market_holidays-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.market_holidays","text":"market_holidays(opts::PolyOpts)\n\nGet upcoming market holidays and their open/close times.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> market_holidays(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1marketstatusupcominganchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.market_status-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.market_status","text":"market_status(opts::PolyOpts)\n\nGet the current trading status of the exchanges and overall financial markets.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> market_status(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1marketstatusnowanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.markets-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.markets","text":"markets(opts::PolyOpts)\n\nGet a list of markets that are currently supported by Polygon.io.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> markets(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencemarketsanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.real_time_currency_conversion","page":"Home","title":"PolygonIO.real_time_currency_conversion","text":"real_time_currency_conversion(opts::PolyOpts, from=\"AUD\", to=\"USD\"; amount=100, precision=2)\n\nGet currency conversions using the latest market conversion rates. Note than you can convert in both directions. For example USD to CAD or CAD to USD.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nfrom: The \"from\" symbol of the pair.\nto: The \"to\" symbol of the pair.\namount: The amount to convert.\nprecision: The decimal precision of the conversion. Defaults to 2 which is 2 decimal places accuracy.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> real_time_currency_conversion(opts, \"AUD\", \"USD\"; amount=100, precision=2)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv1conversionfrom___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.stock_dividends-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stock_dividends","text":"stock_dividends(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet a list of historical dividends for a stock, including the relevant dates and the amount of the dividend.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nstocksTicker::AbstractString - The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stock_dividends(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2reference_dividendsstocksTickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stock_exchanges-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.stock_exchanges","text":"stock_exchanges(opts::PolyOpts)\n\nGet a list of stock exchanges which are supported by Polygon.io.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stock_exchanges(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv1metaexchangesanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stock_financials-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stock_financials","text":"stock_financials(opts::PolyOpts, stocksTicker::AbstractString; limit=5, kwargs...)\n\nGet historical financial data for a stock ticker.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nstocksTicker::AbstractString - The ticker symbol of the stock/equity.\nlimit::Integer - Limit the number of results.\nkwargs::Any: A list of additional arguments to pass to the Polygon IO API.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stock_financials(opts, \"AAPL\", limit=5)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencefinancialsanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stock_splits-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stock_splits","text":"stock_splits(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet a list of historical stock splits for a ticker symbol, including the execution and payment dates of the stock split, and the split ratio.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nstocksTicker::AbstractString - The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stock_splits(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2reference_splitsstocksTickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_aggregates_bars-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_aggregates_bars","text":"stocks_aggregates_bars(opts::PolyOpts, stocksTicker::AbstractString;\n                    multiplier=1, timespan=\"day\", from=\"2020-10-14\", to=\"2020-10-14\",\n                    adjusted=true, sort=\"asc\", limit=120, kwargs...)\n\nGet aggregate bars for a stock over a given date range in custom time window sizes. For example, if timespan = ‘minute’ and multiplier = ‘5’ then 5-minute bars will be returned.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\nmultiplier::Int: TThe size of the timespan multiplier.\ntimespan::AbstractString: The size of the time window.\nfrom::AbstractString: The start of the aggregate time window.\nto::AbstractString: The end of the aggregate time window.\nadjusted::Bool: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\nsort::AbstractString: Sort the results by timestamp. asc will return results in ascending order (oldest at the top),  desc will return results in descending order (newest at the top).\nlimit::Int: Limits the number of base aggregates queried to create the aggregate results. Max 50000 and Default 120.\nkwargs::AbstractString: Any additional arguments.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_aggregates_bars(opts, \"AAPL\", multiplier=5, timespan=\"minute\", from=\"2017-01-01\", to=\"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggs_tickerstocksTickerrangemultiplier___timespan___from___toanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_daily_open_close-Tuple{PolyOpts, AbstractString, AbstractString}","page":"Home","title":"PolygonIO.stocks_daily_open_close","text":"stocks_daily_open_close(opts::PolyOpts, stocksTicker::AbstractString, date::AbstractString; adjusted=true)\n\nGet the open, close and afterhours prices of a stock symbol on a certain date.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\ndate::AbstractString: The date of the requested open/close in the format YYYY-MM-DD.\nadjusted::Bool: Whether or not the results are adjusted for splits. By default, results are adjusted.  Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_daily_open_close(opts, \"AAPL\", \"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv1open-closestocksTicker___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_grouped_daily_bars-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_grouped_daily_bars","text":"stocks_grouped_daily_bars(opts::PolyOpts, date::AbstractString; adjusted=true)\n\nGet the daily open, high, low, and close (OHLC) for the entire stocks/equities markets.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndate::AbstractString: The beginning date for the aggregate window.\nadjusted::Bool: Whether or not the results are adjusted for splits. By default, results are adjusted.  Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_grouped_daily_bars(opts, \"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggsgroupedlocaleusmarket_stocksdateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_last_quote_symbol-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_last_quote_symbol","text":"stocks_last_quote_symbol(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet the most recent NBBO (Quote) tick for a given stock.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_last_quote_symbol(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2last_nbbostocksTickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_last_trade_symbol-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_last_trade_symbol","text":"stocks_last_trade_symbol(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet the most recent trade for a given stock.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_last_trade_symbol(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2last_tradestocksTickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_previous_close-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_previous_close","text":"stocks_previous_close(opts::PolyOpts, stocksTicker::AbstractString; adjusted=true)\n\nGet the previous day's open, high, low, and close (OHLC) for the specified stock ticker.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\nadjusted::Bool: Whether or not the results are adjusted for splits.  By default, results are adjusted. Set this to false to get results that are NOT adjusted for splits.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_previous_close(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2aggstickerstocksTickerprevanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_quotes_nbbo-Tuple{PolyOpts, AbstractString, AbstractString}","page":"Home","title":"PolygonIO.stocks_quotes_nbbo","text":"stocks_quotes_nbbo(opts::PolyOpts, ticker::AbstractString, date::AbstractString; limit=10, reverse=true, kwargs...)\n\nGet NBBO quotes for a given ticker symbol on a specified date.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nticker::AbstractString: The ticker symbol we want quotes for.\ndate::AbstractString: The date/day of the quotes to retrieve in the format YYYY-MM-DD.\nlimit::Int: Limit the size of the response, max 50000 and default 10.\nreverse::Bool: Reverse the order of the results.\nkwargs::Any: A list of additional arguments to pass to the Polygon IO API.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_quotes_nbbo(opts, \"AAPL\", \"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2ticksstocksnbboticker___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_snapshot_all_tickers-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_snapshot_all_tickers","text":"stocks_snapshot_all_tickers(opts::PolyOpts, tickers::AbstractString)\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for all traded stock symbols. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ntickers::AbstractString: A comma separated list of tickers to get snapshots for.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_snapshot(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleusmarketsstockstickersanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_snapshot_gainers_losers","page":"Home","title":"PolygonIO.stocks_snapshot_gainers_losers","text":"stocks_snapshot_gainers_losers(opts::PolyOpts, direction=\"losers\")\n\nGet the current top 20 gainers or losers of the day in stocks/equities markets. Top gainers are those tickers whose price has increased by the highest percentage since the previous day's close. Top losers are those tickers whose price has decreased by the highest percentage since the previous day's close. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\ndirection::AbstractString: The direction of the snapshot results to return. The direction can be \"gainers\" or \"losers\".\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_snapshot_gainers_losers(opts, \"losers\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleusmarketsstocksdirectionanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"#PolygonIO.stocks_snapshot_ticker-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.stocks_snapshot_ticker","text":"stocks_snapshot_ticker(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet the current minute, day, and previous day’s aggregate, as well as the last trade and quote for a single traded stock ticker. Note: Snapshot data is cleared at 12am EST and gets populated as data is received from the exchanges. This can happen as early as 4am EST.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nstocksTicker::AbstractString: The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_snapshot_ticker(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array\nSee https://polygon.io/docs/getv2snapshotlocaleusmarketsstocks_tickersstocksTickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.stocks_trades-Tuple{PolyOpts, AbstractString, AbstractString}","page":"Home","title":"PolygonIO.stocks_trades","text":"stocks_trades(opts::PolyOpts, ticker::AbstractString, date::AbstractString; limit=10, reverse=true, kwargs...)\n\nGet stock trades for a given ticker symbol on a specified date.\n\nArguments\n\nopts::PolyOpts: The PolyOpts object used to configure the request.\nticker::AbstractString: The ticker symbol we want trades for.\ndate::AbstractString: The date/day of the trades to retrieve in the format YYYY-MM-DD.\nlimit::Int: Limit the size of the response, max 50000 and default 10.\nreverse::Boolean: Reverse the order of the results.\nkwargs::Any: A list of additional arguments to pass to the Polygon IO API.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> stocks_trades(opts, \"AAPL\", \"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2ticksstockstradesticker___dateanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.ticker_details-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.ticker_details","text":"ticker_details(opts::PolyOpts, stocksTicker::AbstractString)\n\nGet details for a ticker symbol's company/entity. This provides a general overview of the entity with information such as name, sector, exchange, logo and similar companies.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nstocksTicker::AbstractString - The ticker symbol of the stock/equity.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> ticker_details(opts, \"AAPL\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencetickerdetails_anchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.ticker_details_vX-Tuple{PolyOpts, AbstractString, AbstractString}","page":"Home","title":"PolygonIO.ticker_details_vX","text":"ticker_details_vX(opts::PolyOpts, ticker::AbstractString, date::AbstractString)\n\nGet a single ticker supported by Polygon.io. This response will have detailed information about the ticker and the company behind it.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nticker::AbstractString - The ticker symbol of the asset.\ndate::AbstractString - Specify a point in time to get information about the ticker available on that date. When retrieving information from SEC filings, we compare this date with the period of report date on the SEC filing.\n\nFor example, consider an SEC filing submitted by AAPL on 2019-07-31, with a period of report date ending on 2019-06-29. That means that the filing was submitted on 2019-07-31, but the filing was created based on information from 2019-06-29. If you were to query for AAPL details on 2019-06-29, the ticker details would include information from the SEC filing. Defaults to the most recent available date.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> ticker_details_vX(opts, \"AAPL\", \"2017-01-01\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getvXreference_tickerstickeranchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.ticker_news-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.ticker_news","text":"ticker_news(opts::PolyOpts, ticker::AbstractString;\n            published_utc_gte=\"2021-04-26\", limit=10,\n            order=\"descending\", sort=\"published_utc\",kwargs...)\n\nGet the most recent news articles relating to a stock ticker symbol, including a summary of the article and a link to the original source.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nticker::AbstractString - Ticker symbol. Return results where this field equals the value.\npublishedutcgte::AbstractString - Return results where this field is greater than or equal to the value.\nlimit::Integer - Limit the size of the response, default is 100 and max is 1000.  If your query returns more than the max limit and you want to retrieve the next page of results, see the next_url response attribute.\norder::String - Order the results in ascending or descending order.\nsort::String - The field key to sort the results on.\nkwargs::Dict - Additional query parameters\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> ticker_news(opts, \"AAPL\", limit=5)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencenewsanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.ticker_types-Tuple{PolyOpts}","page":"Home","title":"PolygonIO.ticker_types","text":"ticker_types(opts::PolyOpts)\n\nGet a mapping of ticker types to their descriptive names.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> ticker_types(opts)\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv2referencetypesanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"#PolygonIO.tickers-Tuple{PolyOpts, AbstractString}","page":"Home","title":"PolygonIO.tickers","text":"tickers(opts::PolyOpts, search::AbstractString;         active=true, sort=\"ticker\", order=\"asc\", limit=10, kwargs...)\n\nQuery all ticker symbols which are supported by Polygon.io. This API currently includes Stocks/Equities, Crypto, and Forex.\n\nArguments\n\nopts::PolyOpts - The PolyOpts object used to configure the request.\nsearch::AbstractString - Search for terms within the ticker and/or company name.\nactive::Boolean - Specify if the tickers returned should be actively traded on the queried date. Default is true.\nsort::String - The field to sort the results on. Default is ticker. If the search query parameter is present, sort is ignored and results are ordered by relevance.\norder::String - The order to sort the results on. Default is asc (ascending).\nlimit::Integer - Limit the size of the response, default is 100 and max is 1000. If your query returns more than the max limit and you want to retrieve the next page of results, see the next_url response attribute.\nkwargs::Dict - Additional query parameters.\n\nExample\n\njulia> opts = PolyOpts(API_KEY, nothing)\njulia> tickers(opts, \"bitcoin\")\n\nReturns\n\nA JSON3.Array or specified tabular representation of the JSON3.Array.\nSee https://polygon.io/docs/getv3referencetickersanchor for documentation on response attributes and supported keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"stocks/#Stocks-API","page":"Stocks","title":"Stocks API","text":"","category":"section"},{"location":"stocks/","page":"Stocks","title":"Stocks","text":"The following endpoints are covered by the Stocks API via these functions:","category":"page"},{"location":"stocks/","page":"Stocks","title":"Stocks","text":"stocks_trades                    => Trades\nstocks_quotes_nbbo               => Quotes (NBBO)\nstocks_last_trade_symbol         => Last Trade for a Symbol v2\nstocks_last_quote_symbol         => Last Quote for a Symbol v2\nstocks_daily_open_close          => Daily Open/Close\nstocks_grouped_daily_bars        => Grouped Daily Bars\nstocks_previous_close            => Previous Close\nstocks_aggregates_bars           => Aggregates (Bars)\nstocks_snapshot_all_tickers      => Snapshot All Tickers\nstocks_snapshot_ticker           => Snapshot Ticker\nstocks_snapshot_gainers_losers   => Snapshot Gainers/Losers","category":"page"},{"location":"stocks/","page":"Stocks","title":"Stocks","text":"Detailed information on each function can be extracted in Julia. For example;","category":"page"},{"location":"stocks/","page":"Stocks","title":"Stocks","text":"using PolygonIO\njulia>?tickers","category":"page"},{"location":"crypto/#Crypto-API","page":"Crypto","title":"Crypto API","text":"","category":"section"},{"location":"crypto/","page":"Crypto","title":"Crypto","text":"The following endpoints are covered by the Crypto API via these functions:","category":"page"},{"location":"crypto/","page":"Crypto","title":"Crypto","text":"last_trade_crypto_pair                    => Last Trade for a Crypto Pair\ncrypto_daily_open_close                   => Daily Open/Close\nhistoric_crypto_trades                    => Historic Crypto Trades\ncrypto_grouped_daily_bars                 => Grouped Daily (Bars)\ncrypto_previous_close                     => Previous Close\ncrypto_aggregates_bars                    => Aggregates (Bars)\ncrypto_snapshot_all_tickers               => Snapshot All Tickers\ncrypto_snapshot_ticker                    => Snapshot Ticker\ncrypto_snapshot_ticker_full_book          => Snapshot Ticker Full Book (L2)\ncrypto_snapshot_gainers_losers            => Snapshot Gainers/Losers","category":"page"},{"location":"crypto/","page":"Crypto","title":"Crypto","text":"Detailed information on each function can be extracted in Julia. For example;","category":"page"},{"location":"crypto/","page":"Crypto","title":"Crypto","text":"using PolygonIO\njulia>?last_trade_crypto_pair","category":"page"}]
}
